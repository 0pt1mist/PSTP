import socket
import json
import time
import hmac
import hashlib
import threading
import asyncio
import websockets
from instructions import read_device_config
from PSTP import Package, Header

SERVER_HOST = 'localhost'
SERVER_PORT = 8080
WEBSOCKET_HOST = 'localhost'
WEBSOCKET_PORT = 8081

class PSTPClient:
    def __init__(self):
        self.device_id, self.shared_secret = read_device_config()
        self.aes_key, self.mac_key = self.derive_keys(self.shared_secret)
        self.connected = False
        self.socket = None
        self.tunnel_info = None

    def recv_all(self, sock, n):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–≤–Ω–æ n –±–∞–π—Ç –∏–∑ —Å–æ–∫–µ—Ç–∞"""
        data = bytearray()
        while len(data) < n:
            packet = sock.recv(n - len(data))
            if not packet:
                return None
            data.extend(packet)
        return bytes(data)

    def derive_keys(self, shared_secret: bytes):
        aes_key = Package.derive_key(shared_secret, salt=b'PSTP_AES_SALT')
        mac_key = Package.derive_key(shared_secret, salt=b'PSTP_MAC_SALT')
        return aes_key, mac_key

    def send_encrypted_command(self, command: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        if not self.connected or not self.socket:
            raise ConnectionError("Not connected to server")

        cmd_json = json.dumps(command)
        header = Header(
            DeviceID=self.device_id,
            Nonce=Package.generate_nonce(),
            Timestamp=int(time.time())
        )
        package = Package(header)
        packed = package.encrypt_and_pack(cmd_json, self.aes_key, self.mac_key)
        
        print(f"   [Client] Sending encrypted command: {command.get('cmd', 'unknown')}")
        self.socket.sendall(packed)
        return self.receive_response()

    def receive_response(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.connected or not self.socket:
            raise ConnectionError("Not connected to server")

        print("   [Client] Waiting for server response...")
        
        # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header_bytes = self.recv_all(self.socket, Header.HEADER_SIZE)
        if not header_bytes:
            raise ConnectionError("No response header from server")

        header = Header.unpack(header_bytes)
        encrypted_len = header.PackageLen - header.HeaderLen
        
        # –ß–∏—Ç–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        encrypted_data = self.recv_all(self.socket, encrypted_len)
        if not encrypted_data:
            raise ConnectionError("No encrypted data from server")

        # –ß–∏—Ç–∞–µ–º MAC
        mac_bytes = self.recv_all(self.socket, 16)
        if not mac_bytes:
            raise ConnectionError("No MAC from server")

        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
        full_packet = header_bytes + encrypted_data + mac_bytes
        
        try:
            _, plaintext = Package.unpack_and_decrypt(full_packet, self.aes_key, self.mac_key)
            response = json.loads(plaintext)
            print(f"   [Client] Received response: {response.get('status', 'unknown')}")
            return response
        except Exception as e:
            raise ValueError(f"Decryption error: {e}")

    def authenticate(self):
        """–ü—Ä–æ—Ö–æ–¥–∏—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
        print(f"Connecting to {SERVER_HOST}:{SERVER_PORT}...")
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.settimeout(10.0)  # –¢–∞–π–º–∞—É—Ç –Ω–∞ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            self.socket.connect((SERVER_HOST, SERVER_PORT))
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            ident_header = Header(
                DeviceID=self.device_id,
                Nonce=Package.generate_nonce(),
                Timestamp=int(time.time())
            )
            self.socket.sendall(ident_header.pack())
            print(f"   [Client] Sent identification header for device: '{self.device_id}'")

            # –ü–æ–ª—É—á–∞–µ–º challenge
            challenge = self.recv_all(self.socket, 16)
            if not challenge:
                print("‚ùå Failed to receive challenge")
                return False

            print(f"   [Client] Challenge received: {challenge.hex()} ({len(challenge)} bytes)")

            # –í—ã—á–∏—Å–ª—è–µ–º HMAC
            h = hmac.new(self.shared_secret, challenge, hashlib.sha256)
            response = h.hexdigest()
            print(f"   [Client] Sending HMAC response: {response}")

            self.socket.sendall(response.encode('utf-8'))
            print("   [Client] HMAC response sent, waiting for authentication result...")

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –û–î–ù–ò–ú –±–ª–æ–∫–æ–º
            header_bytes = self.recv_all(self.socket, Header.HEADER_SIZE)
            if not header_bytes:
                print("‚ùå No auth response header from server")
                return False

            temp_header = Header.unpack(header_bytes)
            encrypted_len = temp_header.PackageLen - temp_header.HeaderLen
            
            encrypted_data = self.recv_all(self.socket, encrypted_len)
            if not encrypted_data:
                print("‚ùå No auth encrypted data from server")
                return False

            mac_bytes = self.recv_all(self.socket, 16)
            if not mac_bytes:
                print("‚ùå No auth MAC from server")
                return False

            full_packet = header_bytes + encrypted_data + mac_bytes

            try:
                _, plaintext = Package.unpack_and_decrypt(full_packet, self.aes_key, self.mac_key)
                auth_response = json.loads(plaintext)
                if auth_response.get("status") == "authenticated":
                    print("‚úÖ Authentication successful!")
                    self.connected = True
                    return True
                else:
                    print(f"‚ùå Authentication failed: {auth_response}")
                    return False
            except Exception as e:
                print(f"‚ùå Auth response decryption error: {e}")
                return False

        except socket.timeout:
            print("‚ùå Authentication timeout - server not responding")
            return False
        except ConnectionRefusedError:
            print("‚ùå Connection refused - server may be down")
            return False
        except Exception as e:
            print(f"‚ùå Authentication error: {e}")
            return False

    def request_tunnel(self):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç—É–Ω–Ω–µ–ª—å —É —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.connected:
            print("‚ùå Not authenticated")
            return None

        cmd = {
            "cmd": "request_tunnel",
            "type": "websocket",
            "ttl": 3600,
            "device_id": self.device_id
        }

        print("üì§ Sending tunnel request...")
        try:
            response = self.send_encrypted_command(cmd)
            
            if response.get("status") == "ok":
                self.tunnel_info = response
                print("üéâ Tunnel created successfully!")
                print(f"   URL: {response['tunnel_url']}")
                print(f"   Token: {response['token']}")
                print(f"   Expires: {time.ctime(response['expires_at'])}")
                return response
            else:
                print(f"‚ùå Tunnel request failed: {response}")
                return None
        except Exception as e:
            print(f"‚ùå Error sending tunnel request: {e}")
            return None

    def send_ping(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ping –∫–æ–º–∞–Ω–¥—É"""
        if not self.connected:
            print("‚ùå Not authenticated")
            return None

        cmd = {
            "cmd": "ping",
            "message": "Hello from client!",
            "timestamp": int(time.time()),
            "device_id": self.device_id
        }

        print("üì§ Sending ping...")
        try:
            response = self.send_encrypted_command(cmd)
            
            if response.get("status") == "ok":
                print(f"‚úÖ Ping response: {response.get('message', 'pong')}")
                return response
            else:
                print(f"‚ùå Ping failed: {response}")
                return None
        except Exception as e:
            print(f"‚ùå Error sending ping: {e}")
            return None

    def send_tunnel_message(self, message_data: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç—É–Ω–Ω–µ–ª—å"""
        if not self.connected:
            print("‚ùå Not authenticated")
            return None

        cmd = {
            "cmd": "send_to_tunnel",
            "data": message_data,
            "timestamp": int(time.time()),
            "device_id": self.device_id
        }

        print("üì§ Sending message to tunnel...")
        try:
            response = self.send_encrypted_command(cmd)
            
            if response.get("status") == "ok":
                print(f"‚úÖ Message delivered to tunnel: {response.get('message', 'delivered')}")
                return response
            else:
                print(f"‚ùå Message delivery failed: {response}")
                return None
        except Exception as e:
            print(f"‚ùå Error sending tunnel message: {e}")
            return None

    def get_status(self):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.connected:
            print("‚ùå Not authenticated")
            return None

        cmd = {
            "cmd": "status",
            "timestamp": int(time.time()),
            "device_id": self.device_id
        }

        print("üì§ Requesting status...")
        try:
            response = self.send_encrypted_command(cmd)
            
            if response.get("status") == "ok":
                status_info = {
                    "device_status": response.get("device_status", "unknown"),
                    "websocket_connected": response.get("websocket_connected", False),
                    "session_age": response.get("session_age", 0),
                    "server_time": time.ctime(response.get("server_time", time.time()))
                }
                print(f"‚úÖ Status: {json.dumps(status_info, indent=2)}")
                return response
            else:
                print(f"‚ùå Status request failed: {response}")
                return None
        except Exception as e:
            print(f"‚ùå Error getting status: {e}")
            return None

    async def connect_to_tunnel(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ WebSocket —Ç—É–Ω–Ω–µ–ª—é"""
        if not self.tunnel_info:
            print("‚ùå No tunnel info available. Request tunnel first.")
            return None

        token = self.tunnel_info['token']
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        tunnel_url = f"ws://localhost:8081/tunnel/{secrets.token_urlsafe(8)}?token={token}"
        
        print(f"üîó Connecting to WebSocket tunnel: {tunnel_url}")
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º extra_headers –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π connect
            async with websockets.connect(tunnel_url) as websocket:
                print("‚úÖ Connected to WebSocket tunnel!")
                print("Type messages to send through tunnel (or 'quit' to exit):")
                
                # –ó–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                async def receive_messages():
                    try:
                        async for message in websocket:
                            try:
                                data = json.loads(message)
                                print(f"\nüì® [TUNNEL] Received: {json.dumps(data, indent=2)}")
                                print("> ", end="", flush=True)
                            except json.JSONDecodeError:
                                print(f"\nüì® [TUNNEL] Raw message: {message}")
                                print("> ", end="", flush=True)
                    except websockets.exceptions.ConnectionClosed:
                        print("\nüîå Tunnel connection closed")
                    except Exception as e:
                        print(f"\n‚ùå Error in receive_messages: {e}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ–Ω–µ
                receive_task = asyncio.create_task(receive_messages())
                
                # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                try:
                    while True:
                        try:
                            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤–≤–æ–¥
                            message_text = await asyncio.get_event_loop().run_in_executor(
                                None, input, "> "
                            )
                            
                            if message_text.lower() in ['quit', 'exit', 'q']:
                                break
                            
                            if message_text.strip():
                                message = {
                                    "device_id": self.device_id,
                                    "message": message_text,
                                    "timestamp": time.time(),
                                    "type": "user_message",
                                    "direction": "client_to_server"
                                }
                                
                                await websocket.send(json.dumps(message))
                                print(f"üì§ [TUNNEL] Sent: {message_text}")
                                
                        except (EOFError, KeyboardInterrupt):
                            break
                        except Exception as e:
                            print(f"‚ùå Input error: {e}")
                            break
                
                finally:
                    receive_task.cancel()
                    try:
                        await receive_task
                    except asyncio.CancelledError:
                        pass
                    except Exception as e:
                        print(f"‚ùå Error cancelling receive task: {e}")
                        
        except websockets.exceptions.InvalidStatusCode as e:
            print(f"‚ùå Connection refused: {e.status_code}")
            if e.status_code == 401:
                print("   üí° Check if the token is valid and not expired")
            elif e.status_code == 403:
                print("   üí° Device not authorized for tunnel access")
        except websockets.exceptions.ConnectionClosedError as e:
            print(f"‚ùå Connection closed unexpectedly: {e}")
        except Exception as e:
            print(f"‚ùå Failed to connect to tunnel: {e}")
            import traceback
            traceback.print_exc()
            return None

        print("üëã Disconnected from WebSocket tunnel")
        return True

    def interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞"""
        if not self.authenticate():
            return

        print("\n" + "="*50)
        print("üöÄ PSTP Client - Interactive Mode")
        print("="*50)
        
        while self.connected:
            print("\nAvailable commands:")
            print("1. request_tunnel - Request WebSocket tunnel")
            print("2. ping - Send ping to server")
            print("3. status - Get server status")
            print("4. send_message - Send test message through tunnel")
            print("5. connect_tunnel - Connect to WebSocket tunnel")
            print("6. disconnect - Disconnect from server")
            print("7. exit - Exit program")
            
            try:
                choice = input("\nEnter command number or name: ").strip().lower()
                
                if choice in ['1', 'request_tunnel']:
                    self.request_tunnel()
                    
                elif choice in ['2', 'ping']:
                    self.send_ping()
                    
                elif choice in ['3', 'status']:
                    self.get_status()
                    
                elif choice in ['4', 'send_message']:
                    message = {
                        "text": f"Hello from PSTP client {self.device_id}!",
                        "type": "test_message",
                        "counter": int(time.time()),
                        "device_id": self.device_id
                    }
                    self.send_tunnel_message(message)
                    
                elif choice in ['5', 'connect_tunnel']:
                    if self.tunnel_info:
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–±—ã—Ç–∏–π–Ω–æ–º —Ü–∏–∫–ª–µ
                        try:
                            asyncio.run(self.connect_to_tunnel())
                        except RuntimeError as e:
                            if "asyncio.run() cannot be called from a running event loop" in str(e):
                                # –ï—Å–ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω event loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                                loop = asyncio.new_event_loop()
                                asyncio.set_event_loop(loop)
                                loop.run_until_complete(self.connect_to_tunnel())
                                loop.close()
                            else:
                                raise
                    else:
                        print("‚ùå No tunnel available. Request tunnel first.")
                        
                elif choice in ['6', 'disconnect']:
                    self.disconnect()
                    print("üëã Disconnected from server")
                    break
                    
                elif choice in ['7', 'exit', 'quit']:
                    self.disconnect()
                    print("üëã Goodbye!")
                    break
                    
                else:
                    print("‚ùå Unknown command")
                    
            except KeyboardInterrupt:
                print("\nüëã Interrupted by user")
                self.disconnect()
                break
            except Exception as e:
                print(f"‚ùå Error: {e}")
                import traceback
                traceback.print_exc()

    def disconnect(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        self.connected = False
        if self.socket:
            try:
                self.socket.close()
            except:
                pass
            self.socket = None

    def auto_mode(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º - –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        print("ü§ñ Starting auto mode...")
        
        if not self.authenticate():
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å
        print("\n" + "="*30)
        tunnel_info = self.request_tunnel()
        if not tunnel_info:
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
        time.sleep(1)
        print("\n" + "="*30)
        self.send_ping()

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        time.sleep(1)
        print("\n" + "="*30)
        self.get_status()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        time.sleep(1)
        print("\n" + "="*30)
        test_message = {
            "text": "Auto-mode test message",
            "type": "auto_test",
            "timestamp": int(time.time()),
            "device_id": self.device_id
        }
        self.send_tunnel_message(test_message)

        print("\n" + "="*30)
        print("‚úÖ Auto mode completed!")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Ç—É–Ω–Ω–µ–ª—é
        connect = input("\nConnect to WebSocket tunnel? (y/n): ").strip().lower()
        if connect in ['y', 'yes']:
            try:
                asyncio.run(self.connect_to_tunnel())
            except RuntimeError as e:
                if "asyncio.run() cannot be called from a running event loop" in str(e):
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    loop.run_until_complete(self.connect_to_tunnel())
                    loop.close()
                else:
                    raise

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        self.disconnect()

def main():
    client = PSTPClient()
    
    print("PSTP Client - Choose mode:")
    print("1. Interactive mode (recommended)")
    print("2. Auto mode")
    
    try:
        choice = input("Enter choice (1 or 2): ").strip()
        
        if choice == "1":
            client.interactive_mode()
        elif choice == "2":
            client.auto_mode()
        else:
            print("‚ùå Invalid choice, using interactive mode")
            client.interactive_mode()
            
    except KeyboardInterrupt:
        print("\nüëã Goodbye!")
        client.disconnect()
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        import traceback
        traceback.print_exc()
        client.disconnect()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ websockets
    try:
        import websockets
        print("üîß WebSocket support available")
        main()
    except ImportError:
        print("‚ùå WebSocket support not available.")
        print("Please install: pip install websockets")
        print("Running in PSTP-only mode...")
        
        client = PSTPClient()
        if client.authenticate():
            client.request_tunnel()
            client.send_ping()
            client.get_status()
        client.disconnect()